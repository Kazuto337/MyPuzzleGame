//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/InputSytem/ActionMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ActionMap: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ActionMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ActionMap"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""0d0ce3ff-0d4c-4ddb-a7b1-d234424e8872"",
            ""actions"": [
                {
                    ""name"": ""DragCamera"",
                    ""type"": ""Button"",
                    ""id"": ""584869bf-043c-49c4-959c-9cc7d0d690f6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ClickButton"",
                    ""type"": ""Button"",
                    ""id"": ""18f11788-fbf6-48a0-9623-1ae0425ba375"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ZoomCamena"",
                    ""type"": ""PassThrough"",
                    ""id"": ""0d38dd5f-1c99-4ffe-aacd-ce596f42fc14"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3f6e2fc0-bf81-461e-a455-aa12e628f696"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DragCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""589fd421-eb7e-4c98-8d35-47d20deff501"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ClickButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""892c4485-8ea3-4ad8-ac55-fca6528d13ae"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZoomCamena"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_DragCamera = m_Gameplay.FindAction("DragCamera", throwIfNotFound: true);
        m_Gameplay_ClickButton = m_Gameplay.FindAction("ClickButton", throwIfNotFound: true);
        m_Gameplay_ZoomCamena = m_Gameplay.FindAction("ZoomCamena", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_DragCamera;
    private readonly InputAction m_Gameplay_ClickButton;
    private readonly InputAction m_Gameplay_ZoomCamena;
    public struct GameplayActions
    {
        private @ActionMap m_Wrapper;
        public GameplayActions(@ActionMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @DragCamera => m_Wrapper.m_Gameplay_DragCamera;
        public InputAction @ClickButton => m_Wrapper.m_Gameplay_ClickButton;
        public InputAction @ZoomCamena => m_Wrapper.m_Gameplay_ZoomCamena;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @DragCamera.started += instance.OnDragCamera;
            @DragCamera.performed += instance.OnDragCamera;
            @DragCamera.canceled += instance.OnDragCamera;
            @ClickButton.started += instance.OnClickButton;
            @ClickButton.performed += instance.OnClickButton;
            @ClickButton.canceled += instance.OnClickButton;
            @ZoomCamena.started += instance.OnZoomCamena;
            @ZoomCamena.performed += instance.OnZoomCamena;
            @ZoomCamena.canceled += instance.OnZoomCamena;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @DragCamera.started -= instance.OnDragCamera;
            @DragCamera.performed -= instance.OnDragCamera;
            @DragCamera.canceled -= instance.OnDragCamera;
            @ClickButton.started -= instance.OnClickButton;
            @ClickButton.performed -= instance.OnClickButton;
            @ClickButton.canceled -= instance.OnClickButton;
            @ZoomCamena.started -= instance.OnZoomCamena;
            @ZoomCamena.performed -= instance.OnZoomCamena;
            @ZoomCamena.canceled -= instance.OnZoomCamena;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnDragCamera(InputAction.CallbackContext context);
        void OnClickButton(InputAction.CallbackContext context);
        void OnZoomCamena(InputAction.CallbackContext context);
    }
}
